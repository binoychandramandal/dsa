package tree.practise1;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class LavelOrderTravarsal {
    public static void main(String[] args) {
        TreeNode t = new TreeNode(1);
        TreeNode left = new TreeNode(2);
        TreeNode right = new TreeNode(3);
        t.left = left;
        t.right = right;
        TreeNode n = new TreeNode(4);
        left.left = n;
        TreeNode n1 = new TreeNode(5);
        n.left = n1;

        TreeNode n2 = new TreeNode(6);
        n1.left = n2;
        TreeNode n3 = new TreeNode(7);
        n1.right = n3;
        right.left = n2;
        right.right = n3;

        levelOrder(t);

        int[][] ar = {{346}, {162, 59}, {148, 18, 323, 131}, {174, 72, 30, 337, 322, 86, 351, 45}, {287, 340, 238, 25, 242, 185, 69, 302, 117, 330, 222, 22, 41, 371, 97, 177}, {247, 273, 369, 184, 114, 254, 349, 147, 38, 167, 326, 43, 112, 125, 211, 282, 256, 79, 329, 35, 156, 239, 23, 127, 19}, {350, 197, 53, 219, 175, 347, 60, 355, 140, 11, 40, 333, 98, 318, 21, 266, 193, 159, 298, 93, 280, 244, 183, 207, 15, 231, 14, 295, 245, 272, 292, 94, 374, 363, 95, 319, 24}, {225, 220, 202, 379, 7, 143, 342, 258, 74, 87, 123, 61, 343, 136, 137, 364, 89, 315, 235, 217, 226, 268, 224, 382, 133, 293, 129, 216, 109, 360, 78, 157, 108, 142, 96, 105, 356, 368, 205, 286, 311, 345, 308, 218}, {261, 305, 312, 246, 52, 116, 120, 56, 300, 99, 251, 5, 91, 240, 47, 68, 33, 352, 119, 357, 278, 188, 198, 209, 111, 135, 241, 321, 12, 192, 248, 104, 372, 75, 149, 325, 375, 277, 80, 332, 73, 64, 106, 77, 255, 16, 154, 281, 257, 199, 71, 306}, {58, 187, 359, 150, 50, 32, 178, 76, 102, 115, 36, 107, 186, 234, 176, 39, 296, 370, 48, 182, 138, 263, 307, 285, 377, 283, 334, 51, 63, 132, 103, 316, 158, 275, 27, 141, 338, 264, 271, 201, 191, 221}, {353, 57, 83, 336, 354, 331, 297, 320, 384, 228, 327, 309, 161, 301, 172, 134, 121, 203, 55, 181, 4, 3, 289, 206, 361, 110, 270, 100, 146, 310, 230}, {229, 34, 253, 200, 173, 29, 233, 179, 169, 128, 313, 160, 166, 165, 13, 366, 88, 92, 122, 223, 6, 152, 380, 20, 85, 195, 279, 70, 81, 274}, {237, 294, 290, 260, 84, 101, 65, 144, 232, 304, 208, 180, 276, 2, 31, 10, 365, 82, 236, 358, 66, 227, 189, 155, 383, 67, 171, 381}, {267, 210, 153, 376, 49, 317, 288, 163, 28, 130, 194, 46, 259, 341, 284, 139, 126, 243, 362, 17, 118, 42, 303, 324, 214, 168}, {151, 291, 8, 124, 367, 378, 213, 328, 164, 62, 44, 204, 335, 250, 269, 262}, {339, 265, 314, 252, 249, 1, 145, 170, 90, 212, 54}, {113, 9, 299, 344, 37}, {190, 373, 196, 26}, {215, 348}};
        int[][] a1 = {{346}, {162, 59}, {148, 18, 323, 131}, {174, 72, 30, 337, 322, 86, 351, 45}, {287, 340, 238, 25, 242, 185, 69, 302, 117, 330, 222, 22, 41, 371, 97, 177}, {247, 273, 369, 184, 114, 254, 349, 147, 38, 167, 326, 43, 112, 125, 211, 282, 256, 79, 329, 35, 156, 239, 23, 127, 19}, {350, 197, 53, 219, 175, 347, 60, 355, 140, 11, 40, 333, 98, 318, 21, 266, 193, 159, 298, 93, 280, 244, 183, 207, 15, 231, 14, 295, 245, 272, 292, 94, 374, 363, 95, 319, 24}, {225, 220, 202, 379, 7, 143, 342, 258, 74, 87, 123, 61, 343, 136, 137, 364, 89, 315, 235, 217, 226, 268, 224, 382, 133, 293, 129, 216, 109, 360, 78, 157, 108, 142, 96, 105, 356, 368, 205, 286, 311, 345, 308, 218}, {261, 305, 312, 246, 52, 116, 120, 56, 300, 99, 251, 5, 91, 240, 47, 68, 33, 352, 119, 357, 278, 188, 198, 209, 111, 135, 241, 321, 12, 192, 248, 104, 372, 75, 149, 325, 375, 277, 80, 332, 73, 64, 106, 77, 255, 16, 154, 281, 257, 199, 71, 306}, {58, 187, 359, 150, 50, 32, 178, 76, 102, 115, 36, 107, 186, 234, 176, 39, 296, 370, 48, 182, 138, 263, 307, 285, 377, 283, 334, 51, 63, 132, 103, 316, 158, 275, 27, 141, 338, 264, 271, 201, 191, 221}, {353, 57, 83, 336, 354, 331, 297, 320, 384, 228, 327, 309, 161, 301, 172, 134, 121, 203, 55, 181, 4, 3, 289, 206, 361, 110, 270, 100, 146, 310, 230}, {229, 34, 253, 200, 173, 29, 233, 179, 169, 128, 313, 160, 166, 165, 13, 366, 88, 92, 122, 223, 6, 152, 380, 20, 85, 195, 279, 70, 81, 274}, {237, 294, 290, 260, 84, 101, 65, 144, 232, 304, 208, 180, 276, 2, 31, 10, 365, 82, 236, 358, 66, 227, 189, 155, 383, 67, 171, 381}, {267, 210, 153, 376, 49, 317, 288, 163, 28, 130, 194, 46, 259, 341, 284, 139, 126, 243, 362, 17, 118, 42, 303, 324, 214, 168}, {151, 291, 8, 124, 367, 378, 213, 328, 164, 62, 44, 204, 335, 250, 269, 262}, {339, 265, 314, 252, 249, 1, 145, 170, 90, 212, 54}, {113, 9, 299, 344, 37}, {190, 373, 196, 26}, {215, 348}};
       List<List<Integer>> l=new ArrayList<>();
        for (int i = 0; i < ar.length; i++) {
            int[] arr=ar[i];
            List<Integer> innerList =new ArrayList<>();
            for (int en :
                    arr) {
                innerList.add(en);
            }
            l.add(innerList);
        }
        System.out.println(l);

        int[][] r = new int[l.size()][];
        for (int i = 0; i < l.size(); i++) {
            List<Integer> result = l.get(i);
            int[] in = new int[result.size()];
            for (int j = 0; j < result.size(); j++) {
                in[j] = result.get(j);
            }
            r[i] = in;
        }
        System.out.println(r);

    }

    static public int[][] levelOrder(TreeNode A) {
        if (A == null) {
            return new int[][]{};
        }
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(A);
        List<ArrayList<Integer>> outer = new ArrayList<>();
        ArrayList<Integer> inner = new ArrayList<>();
        while (!q.isEmpty()) {
            int lavelSize =q.size();
            for (int i = 1; i <= lavelSize; i++) {
                TreeNode t = q.poll();
                inner.add(t.val);
                if (t.left != null) {
                    q.offer(t.left);
                }
                if (t.right != null) {
                    q.offer(t.right);
                }
            }
            outer.add(inner);
            inner=new ArrayList<>();
        }
        int[][] r = new int[outer.size()][];
        for (int i = 0; i < r.length; i++) {
            ArrayList<Integer> result = outer.get(i);
            int[] in = new int[result.size()];
            for (int j = 0; j < result.size(); j++) {
                in[j] = result.get(j);
            }
            r[i] = in;
        }

        return r;
    }
}
